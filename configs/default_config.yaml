seed: 42
task_type: regression  # "regression" for health index prediction; "classification" if you have discrete classes

# Data
data_dir: "data/processed"
train_csv: "train.csv"
val_csv: "val.csv"
test_csv: "test.csv"
image_col: "image_path"
target_col: "health_index"  # change to your column name
normalize_mean: [0.485, 0.456, 0.406]
normalize_std: [0.229, 0.224, 0.225]
image_size: 224

# Training
batch_size: 32
num_epochs: 50
learning_rate: 0.0005
optimizer: adam
weight_decay: 0.0001
early_stopping_patience: 10
scheduler: cosine  # "step", "plateau", or "cosine"
mixed_precision: true

# Model
model_name: custom_cnn  # "custom_cnn", "resnet50", "efficientnet_b0"
pretrained: true
freeze_backbone: false
dropout: 0.3

# Paths
checkpoint_dir: "outputs/checkpoints"
log_dir: "outputs/logs"
metrics_dir: "outputs/metrics"
gradcam_dir: "outputs/gradcam"

# Augmentation
augment:
  horizontal_flip: true
  vertical_flip: false
  rotation_deg: 15
  brightness: 0.15
  contrast: 0.15
  jitter: true
  random_erasing: true

# Tuning (used in hyperparameter_tuning.py)
tuning:
  max_trials: 20
  learning_rates: [0.0001, 0.0005, 0.001]
  batch_sizes: [16, 32, 64]
  weight_decays: [0.0, 0.0001, 0.001]
  dropout_rates: [0.0, 0.2, 0.5]
  freeze_backbone_options: [true, false]
